function set_up(self)
	local background_node = gui.get_node("background")
	local scroll_bar = gui.get_node("scroll bar")
	local center = self.CENTER_SCREEN
	gui.set_position(background_node, center)
	gui.set_position(scroll_bar, vmath.vector3(center.x+100, center.y, center.z))
end

function add_creature(self, creature_name, roll, is_friendly)
	local node = gui.new_box_node(self.NAME_POSITION, self.NAME_SIZE)
	add_roll(self, node, roll)
	local parent = self.STENCIL
	gui.set_texture(node, "gui")
	gui.play_flipbook(node, "button")
	gui.set_layer(node, "button")
	gui.set_clipping_mode(node, gui.CLIPPING_MODE_NONE)
	-- have to child to stencil to activate clipping
	gui.set_parent(node, parent, true)
	-- reduce y scale to half to offset scaling by parent 
	gui.set_scale(node, vmath.vector3(1, .5, 1))
	local text_node = gui.new_text_node(self.NEUTRAL_POSITION, creature_name)
	gui.set_parent(text_node, node)
	gui.set_font(text_node, self.FONT)
	gui.set_layer(text_node, "text")
	--print(is_friendly)
	if is_friendly then
		gui.set_color(text_node, self.GREEN)
	else
		gui.set_color(text_node, self.RED)
	end
	return node
end

function add_roll(self, parent, roll)
	local node = gui.new_box_node(self.ROLL_POSITION, self.ROLL_SIZE)
	print(gui.get_position(node))
	gui.set_parent(node, parent)
	gui.set_texture(node, "gui")
	gui.play_flipbook(node, "big_ball_button")
	gui.set_layer(node, "button")
	local text_node = gui.new_text_node(self.NEUTRAL_POSITION, roll)
	gui.set_parent(text_node, node)
	gui.set_font(text_node, self.FONT)
	gui.set_layer(text_node, "text")
	print(gui.get_position(node))
end

function slide_up(node)
	--print(gui.get_position(node))
	local current_position = gui.get_position(node)
	local new_y = current_position.y+20
		gui.animate(node, "position.y", new_y, gui.EASING_LINEAR, 1) 
	--print(new_y)
end

function slide_down(node)
	--print(gui.get_position(node))
	local current_position = gui.get_position(node)
	local new_y = current_position.y-20
	gui.animate(node, "position.y", new_y, gui.EASING_LINEAR, 1) 
	--print(new_y)
end

function slide_to_place_in_order(node, place)
	--print(gui.get_position(node))
	local current_position = gui.get_position(node)
	-- subtract 1 for 1 indexing in lua table
	local new_y = current_position.y-(20*(place-1))
		gui.animate(node, "position.y", new_y, gui.EASING_OUTCIRC, 1)
	--print(gui.get_position(node))
end

function move_slider(self, direction, amount, MAX)
	local node = gui.get_node("slider")
	amount = amount*direction
	local current_position = gui.get_position(node)
	local new_y = current_position.y + amount 
	gui.animate(node, "position.y", new_y, gui.EASING_LINEAR, 1, 0, function()
		self.is_slider_enabled = true
	end)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.SCREEN_WIDTH = 960
	self.SCREEN_HEIGHT = 640
	self.CENTER_SCREEN = vmath.vector3(self.SCREEN_WIDTH/2, self.SCREEN_HEIGHT/2, 1)
	
	self.NAME_POSITION = vmath.vector3((self.SCREEN_WIDTH/2)-20, (self.SCREEN_HEIGHT/2)+20, 1)
	self.ROLL_POSITION = vmath.vector3(80, 0, 0)
	self.NEUTRAL_POSITION = vmath.vector3(0, 0, 0)
	
	self.NAME_SIZE = vmath.vector3(120, 33, 1)
	self.ROLL_SIZE = vmath.vector3(33, 33, 1)

	self.GREEN = vmath.vector4(0, 1, 0, 1)
	self.RED = vmath.vector4(.7, 0, 0, 1)
	self.FONT = "system_font"
	self.STENCIL = gui.get_node("stencil")

	self.display_init = hash("display_init")

	self.is_initiated = false
	self.is_slider_selected = false
	self.is_slider_enabled = true
	self.init_nodes = {}

	set_up(self)



	--added scroll bar and slider, figured out clipping with roll nodes
	--synced up and down buttons with init list
	--updated to handle any number of combatants




	

	-- scroll bar functionality
	
	-- add and remove functionality,
	-- turn up and complete functionality,
	-- neutral color






	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == self.display_init then
		for i in pairs(message[1]) do
			table.insert(self.init_nodes, add_creature(self, message[1][i], message[2][i], message[3][i]))
		end
		for i in pairs(self.init_nodes) do
			slide_to_place_in_order(self.init_nodes[i], i)
		end
	end
end

function on_input(self, action_id, action)
	local x = action.x
	local y = action.y

	local icon = gui.get_node("icon")
	local slider = gui.get_node("slider")
	local up = gui.get_node("up arrow")
	local down = gui.get_node("down arrow")
	
	local SLIDER_MAX = 125
	local SLIDER_LENGTH = 250
	local slider_position = gui.get_position(slider)

	if self.is_slider_selected then
		--scroll bar and slider position is relative to its parent node, background, set at center screen
		-- must adjust mouse input from screen position to node position
		local adjusted_y = y-self.CENTER_SCREEN.y
		local new_position = vmath.vector3(slider_position.x, adjusted_y, slider_position.z)
		
		if slider_position.y > SLIDER_MAX-1 and adjusted_y > slider_position.y then
			new_position.y = SLIDER_MAX
		elseif slider_position.y < -SLIDER_MAX+1 and adjusted_y < slider_position.y then
			new_position.y = -SLIDER_MAX
		end
		
		gui.set_position(slider, new_position)

		if action.released then
			--print("released")
			self.is_slider_selected = false
		end
	end

	if not action.pressed then
		return
	end

	local NUM_OF_NAMES_DISPLAYED = 5
	local slide_amount = SLIDER_LENGTH/(table.maxn(self.init_nodes)-NUM_OF_NAMES_DISPLAYED)

	if (gui.pick_node(icon, x, y) or action_id == hash("proceed")) and not self.is_initiated then
		msg.post("/initiative", "init_complete")
		self.is_initiated = true
	end

	if not self.is_initiated then 
		return
	end

	if gui.pick_node(slider, x, y) then
		self.is_slider_selected = true
		
	elseif gui.pick_node(up, x, y) then
		if slider_position.y > SLIDER_MAX-1 then
			return
		end
		if not self.is_slider_enabled then
			return
		end
		for i in pairs(self.init_nodes) do
			slide_down(self.init_nodes[i])
		end
		move_slider(self, 1, slide_amount, SLIDER_MAX)
		self.is_slider_enabled = false
		
	elseif gui.pick_node(down, x, y) then
		if slider_position.y < -SLIDER_MAX+1 then
			return
		end
		if not self.is_slider_enabled then
			return
		end
		for i in pairs(self.init_nodes) do
			slide_up(self.init_nodes[i])
		end
		move_slider(self, -1, slide_amount, SLIDER_MAX)
		self.is_slider_enabled = false
	end
end